"use client"

import { useEffect, useState } from "react"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { analytics } from '@/utils/analytics'

type CardType = 'foreign' | 'russian';


const oneTimePaymentLinks = {
  foreign: {
    "15": "https://donate.stripe.com/8wMbLi7Vb1zTb96fZ4",
    "20": "https://donate.stripe.com/cN2bLigrH4M56SQ14b",
    "25": "https://donate.stripe.com/dR67v2grHcex2CAbIQ"
  },

  // Russian cards for One Time Donations are not supported
  russian: {
    "500": "",
    "1000": "",
    "1500": ""
  }
} as const;

const recurrentPaymentLinks = {
  foreign: {
    "15": "https://buy.stripe.com/9AQ4iQ0sJguNdhe3cf",
    "20": "https://buy.stripe.com/8wMaHe6R7bat5OM6oq",
    "25": "https://buy.stripe.com/aEUeXu4IZfqJ90Y7sw"
  },
  russian: {
    "500": "https://auth.robokassa.ru/RecurringSubscriptionPage/Subscription/Subscribe?SubscriptionId=2ac6907a-bb40-446f-b015-a3394a9f9ef9",
    "1000": "https://auth.robokassa.ru/RecurringSubscriptionPage/Subscription/Subscribe?SubscriptionId=6da6655c-15ba-46c4-8e6c-e2e40cbfef52",
    "1500": "https://auth.robokassa.ru/RecurringSubscriptionPage/Subscription/Subscribe?SubscriptionId=fb1b380b-96ad-47ea-957c-a39887d2e9a2"
  }
} as const;

interface DonationFormProps {
  formId?: string;
  noBorder?: boolean;
}

export function DonationForm({ formId = 'default', noBorder = false }: DonationFormProps) {


  const [isOneTimeDonation, setIsOneTimeDonation] = useState(false);
  const [cardType, setCardType] = useState<CardType>('foreign')
  const [amount, setAmount] = useState<string>(cardType === 'foreign' ? "20" : "1000");

  useEffect(() => {
    if (isOneTimeDonation) {
      setCardType('foreign');
    }
  }, [isOneTimeDonation])

  const handleCardTypeChange = (type: CardType) => {
    setCardType(type)
    setAmount(type === 'foreign' ? "20" : "1000")
    analytics.trackDonationForm({
      action: 'Card Type Change',
      label: type,
      formId,
      paymentMethod: type,
      currency: type === 'foreign' ? 'USD' : 'RUB'
    });
  }

  const handleAmountClick = (value: string) => {
    setAmount(value)
    analytics.trackDonationForm({
      action: 'Payment Option Click',
      label: cardType === 'foreign' ? `$${value}` : `${value}‚ÇΩ`,
      formId,
      paymentMethod: cardType,
      currency: cardType === 'foreign' ? 'USD' : 'RUB'
    });
  }

  const handleDonateClick = () => {
    const numericAmount = parseInt(amount, 10);

    if (isOneTimeDonation && cardType === 'russian') {
      return;
    }

    if (isOneTimeDonation) {
      if (!isNaN(numericAmount) && numericAmount > 0) {
        analytics.trackDonationInitiation({
          action: 'One Time Donate Button Click',
          label: cardType === 'foreign' ? `$${amount}` : `${amount}‚ÇΩ`,
          formId,
          donationAmount: numericAmount,
          paymentMethod: cardType,
          currency: cardType === 'foreign' ? 'USD' : 'RUB'
        });

        const paymentLink = oneTimePaymentLinks[cardType][amount as keyof typeof oneTimePaymentLinks[typeof cardType]];
        if (paymentLink) {
          window.location.href = paymentLink;
        } else {
          console.error('Invalid payment link for amount:', amount);
        }
      }
      return;
    }

    if (!isNaN(numericAmount) && numericAmount > 0) {
      analytics.trackDonationInitiation({
        action: 'Donate Button Click',
        label: cardType === 'foreign' ? `$${amount}` : `${amount}‚ÇΩ`,
        formId,
        donationAmount: numericAmount,
        paymentMethod: cardType,
        currency: cardType === 'foreign' ? 'USD' : 'RUB'
      });

      const paymentLink = recurrentPaymentLinks[cardType][amount as keyof typeof recurrentPaymentLinks[typeof cardType]];
      if (paymentLink) {
        window.location.href = paymentLink;
      } else {
        console.error('Invalid payment link for amount:', amount);
      }
    }
  }

  const handleLegalLinkClick = (linkName: string) => {
    analytics.trackDonationForm({
      action: 'Legal Link Click',
      label: linkName,
      formId,
      paymentMethod: cardType,
      currency: cardType === 'foreign' ? 'USD' : 'RUB'
    });
  }

  const currentAmounts = Object.keys(recurrentPaymentLinks[cardType]);

  return (
    <div className={`bg-white rounded-lg p-4 w-full ${!noBorder ? 'border-4 border-red-200' : ''}`}>
      <h3 className="text-2xl md:text-2xl font-bold mb-6 text-center">
        <span className="text-red-500">–ü–û–ú–û–ì–ò–¢–ï –ñ–ï–ù–©–ò–ù–ê–ú,</span><br />
        <span className="text-black">–°–¢–†–ê–î–ê–Æ–©–ò–ú –û–¢{"\u00A0"}–î–û–ú–ê–®–ù–ï–ì–û –ù–ê–°–ò–õ–ò–Ø</span>
      </h3>
      {/* <p className="text-base mb-6 text-center">
        –ü–æ–ª—É—á–∏—Ç—å <strong>—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–±–µ–∂–∏—â–µ, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å, –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ</strong> –∏{"\u00A0"}–≤—ã—Ä–≤–∞—Ç—å—Å—è –∏–∑{"\u00A0"}–∑–∞–º–∫–Ω—É—Ç–æ–≥–æ –∫—Ä—É–≥–∞
      </p> */}

      <p className="text-base mb-6 text-center">
        –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞{"\u00A0"}

        <span onClick={() => {
          setIsOneTimeDonation(false)
        }} className={!isOneTimeDonation ? "font-semibold cursor-pointer" : "underline cursor-pointer"}>‚ù§Ô∏è–µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ</span> –∏–ª–∏ <span onClick={() => {
          setIsOneTimeDonation(true)
        }} className={isOneTimeDonation ? "font-semibold cursor-pointer" : "underline cursor-pointer"}>—Ä–∞–∑–æ–≤—ã–µ</span> –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
      </p>
      <div className="flex justify-center mb-2 sm:mb-4 md:mb-6 border-b border-red-600/20">
        <button
          onClick={() => handleCardTypeChange('foreign')}
          className={`px-3 sm:px-4 md:px-6 py-2 md:py-3 text-[15px] sm:text-base md:text-lg font-medium transition-colors relative ${cardType === 'foreign'
            ? 'text-red-600 border-b-2 border-red-600'
            : 'text-red-600/60 hover:text-red-600/80'
            }`}
        >
          –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞
        </button>
        {!isOneTimeDonation && <>
          <button
            onClick={() => handleCardTypeChange('russian')}
            className={`px-3 sm:px-4 md:px-6 py-2 md:py-3 text-[15px] sm:text-base md:text-lg font-medium transition-colors relative ${cardType === 'russian'
              ? 'text-red-600 border-b-2 border-red-600'
              : 'text-red-600/60 hover:text-red-600/80'
              }`}
          >
            –†–æ—Å—Å–∏–π—Å–∫–∞—è –∫–∞—Ä—Ç–∞
          </button>
        </>}
      </div>
      <div className="grid grid-cols-3 gap-3 sm:gap-4 mb-8 mt-6">
        {currentAmounts.map((value) => (
          <Button
            key={value}
            variant={amount === value ? "default" : "outline"}
            onClick={() => handleAmountClick(value)}
            className={`w-full text-lg sm:text-xl py-2 h-auto min-h-[44px] ${amount === value
              ? "bg-gray-600 text-white hover:bg-gray-600 text-white"
              : "bg-transparent border-2 border-gray-400 text-gray-600 hover:bg-white"
              }`}
          >
            {cardType === 'foreign' ? `$${value}` : `${value}‚ÇΩ`}
          </Button>
        ))}
      </div>

      <Button
        className="w-full bg-red-500 text-white hover:bg-red-600 mb-6 text-xl font-bold py-10 rounded-md"
        onClick={handleDonateClick}
      >
        –ü–æ–º–æ—á—å —Å–µ–π—á–∞—Å! ü§ç
      </Button>

      {/* <p className="text-base mb-8 text-center">
        –ë–µ–∑ –≤–∞—à–µ–π –ø–æ–º–æ—â–∏ –æ–Ω–∏ –Ω–µ{"\u00A0"}—Å–ø—Ä–∞–≤—è—Ç—Å—è. –î–∞–∂–µ {cardType === 'foreign' ? "20$" : "1000‚ÇΩ"} –º–æ–≥—É—Ç —Å–ø–∞—Å—Ç–∏ —á—å—é-—Ç–æ –∂–∏–∑–Ω—å.
      </p> */}

      <p className="text-sm text-center">
        –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å{" "}
        <Link
          href="https://nasiliu.net/wp-content/uploads/2024/03/oferta-nn_eu.pdf"
          target="_blank"
          rel="noopener noreferrer"
          className="underline"
          onClick={() => handleLegalLinkClick('–æ—Ñ–µ—Ä—Ç–∞')}
        >
          –æ—Ñ–µ—Ä—Ç–æ–π
        </Link>{" "}
        –∏{" "}
        <Link
          href="https://nasiliu.net/wp-content/uploads/2024/03/politika-konfidenczialnosti-nn_eu.pdf"
          target="_blank"
          rel="noopener noreferrer"
          className="underline"
          onClick={() => handleLegalLinkClick('–æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')}
        >
          –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        </Link>
      </p>
    </div>
  )
}
